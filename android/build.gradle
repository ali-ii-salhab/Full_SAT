buildscript {
    ext.kotlin_version = '1.9.0'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // https://developer.android.com/build/releases/gradle-plugin
        // this link to select 
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'
    }
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
// The error message you're encountering, which references "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle," often arises in Flutter projects when there are issues related to the Gradle build process. This could be due to various reasons, such as incorrect configurations, missing dependencies, or issues with your Flutter installation. Here’s a comprehensive guide to diagnosing and resolving this error.

// ### Step 1: Check Flutter Installation

// Ensure that your Flutter SDK is correctly installed and configured. You can check your Flutter installation by running:

// bash
// flutter doctor


// This command will provide information about your Flutter installation and any issues that need to be addressed. Make sure that all required components are installed.

// ### Step 2: Update Flutter SDK

// Sometimes, the issue may arise from bugs in older versions of Flutter. To ensure you’re using the latest stable version, update Flutter:

// bash
// flutter upgrade


// ### Step 3: Check Your flutter.gradle File

// 1. Navigate to the flutter.gradle file located in your Flutter SDK directory at:

   
//    $FLUTTER_ROOT/packages/flutter_tools/gradle/flutter.gradle
   

// 2. Open this file and check for any syntax errors or issues. If you have modified this file, consider restoring it to the original version by updating Flutter.

// ### Step 4: Verify android/build.gradle

// Open your project’s android/build.gradle file and ensure that it is correctly configured. Look for the following:

// - Ensure you have the correct repositories set up:

// groovy
// buildscript {
//     repositories {
//         google()
//         mavenCentral()
//     }
//     dependencies {
//         classpath 'com.android.tools.build:gradle:7.0.0'  // Make sure this is compatible with your setup
//     }
// }


// - Check the ext.kotlin_version if you're using Kotlin, ensuring it's set appropriately (for example, 1.5.30 or newer).

// ### Step 5: Clean and Rebuild Your Project

// To eliminate any potential caching issues, clean and rebuild your Flutter project:

// bash
// flutter clean
// flutter pub get
// flutter build apk  // or flutter run to test on an emulator/device


// ### Step 6: Check Android Gradle Plugin Compatibility

// Ensure that your Android Gradle plugin is compatible with the version of Flutter you are using. If you are using an older version of Flutter, consider updating the Gradle plugin:

// 1. Open android/build.gradle.
// 2. Update the Gradle plugin version to a compatible version, such as:

// groovy
// classpath 'com.android.tools.build:gradle:7.0.2'  // Adjust as necessary


// ### Step 7: Check Gradle Wrapper Configuration

// The Gradle wrapper version used in your project can also cause issues. To check the Gradle wrapper version:

// 1. Open android/gradle/wrapper/gradle-wrapper.properties.
// 2. Ensure the distribution URL points to a compatible version of Gradle:

// properties
// distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip  // Adjust as necessary


// ### Step 8: Check for Updates in Android Studio

// If you are using Android Studio, ensure that your Android Studio and its components are up to date:

// 1. Open Android Studio.
// 2. Go to *Help > Check for Updates* (on Windows) or *Android Studio > Check for Updates* (on macOS).
// 3. Update any components if necessary.

// ### Step 9: Review Flutter and Gradle Logs

// If the error persists, you can enable verbose logging to get more detailed output:

// bash
// flutter run --verbose


// This command will provide extensive logs that can help you identify the exact cause of the error.